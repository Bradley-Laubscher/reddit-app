{"version":3,"sources":["Components/articles/selfText.js","Components/articles/article.js","App.js","reportWebVitals.js","index.js"],"names":["Popup","props","className","onClick","handleClose","content","Article","useState","isOpen","setIsOpen","togglePopup","href","article","permalink","target","title","id","author","type","value","selftext","src","alt","ups","upvote_ratio","App","articles","setArticles","subreddit","setSubreddit","useEffect","fetch","then","res","status","alert","json","data","children","window","confirm","open","style","color","e","onChange","map","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0c52b5c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './selfText.css';\r\n\r\nconst Popup = props => {\r\n\r\n    return (\r\n      <div className=\"popup-box\">\r\n        <div className=\"box\">\r\n          <span className=\"close-icon\" onClick={props.handleClose}>x</span>\r\n          {props.content}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n   \r\nexport default Popup;","import React, { useState } from 'react';\r\nimport './article.css';\r\nimport Popup from './selfText';\r\n\r\nexport function Article(props) {\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n \r\n  const togglePopup = () => {\r\n    setIsOpen(!isOpen);\r\n  }\r\n\r\n  return (\r\n    <article className='articles'>\r\n      <a href={\"https://reddit.com\" + props.article.permalink } target=\"blank\">\r\n        <h3 className='articleTitles'>{ props.article.title }</h3>        \r\n      </a>\r\n      <div className='articleInfo'> \r\n        <h4 id='author'>Author: { props.article.author }</h4>\r\n        <input\r\n          type=\"button\"\r\n          value=\"Learn more\"\r\n          className='button'\r\n          onClick={togglePopup}\r\n        />\r\n        {isOpen && <Popup\r\n          content={<>\r\n            <b>{ props.article.title }</b>\r\n            <p>{ props.article.selftext }</p>\r\n          </>}\r\n          handleClose={togglePopup}\r\n          />\r\n        }\r\n        <h4 id='votes'>\r\n          <img src='https://iconsplace.com/wp-content/uploads/_icons/40e0d0/256/png/thumbs-up-icon-17-256.png' alt='thumbs up'/>  { props.article.ups }<br/>\r\n          Upvote Ratio: {props.article.upvote_ratio}\r\n        </h4>\r\n      </div>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default Article;","import './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Article } from './Components/articles/article';\r\n\r\n\r\nexport function App() {\r\n\r\n  const [articles, setArticles] = useState([]);\r\n  const [subreddit, setSubreddit] = useState('Javascript');\r\n  const proxy = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\n\r\n  useEffect(() => {\r\n      fetch(`${proxy}https://www.reddit.com/r/${subreddit}.json`).then(res => {\r\n\r\n        if (res.status === 429) {\r\n          alert('Too many resent requests!');\r\n        }\r\n\r\n        if (res.status !== 200) {\r\n          return;\r\n        } \r\n        \r\n        res.json().then(data => {\r\n          if (data != null) {\r\n            setArticles(data.data.children);\r\n          }\r\n        })\r\n   \r\n      });\r\n  }, [subreddit, setSubreddit]);\r\n\r\n  useEffect(() => {\r\n    if (window.confirm('Press OK to follow a link to temporarily allow access for the the retrieval of data from Reddit. Press Cancel if you have already allowed access and would like to load the page.')) {\r\n      window.open('https://cors-anywhere.herokuapp.com/corsdemo', '_blank')\r\n    }\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img className='App-logo' src='https://www.redditinc.com/assets/images/site/reddit-logo.png' alt='Reddit-logo'/>\r\n        <h1>\r\n          <span style={{color: 'red'}}>Reddit</span><span style={{color: '#18309cec'}}>Minimal</span>\r\n        </h1>\r\n      </header>\r\n      <div className='App-body'>\r\n        <div className='categories'>\r\n            <button className='buttonLeft' value={'home'} onClick={ e => setSubreddit(e.target.value)}>Home</button>\r\n            <button className='buttonLeft' value={'news'} onClick={ e => setSubreddit(e.target.value)}>News</button>\r\n            <button className='buttonMiddle' value={'funny'} onClick={ e => setSubreddit(e.target.value)}>Funny</button>\r\n            <button className='buttonRight' value={'rising'} onClick={ e => setSubreddit(e.target.value)}>Rising</button>\r\n            <button className='buttonRight' value={'random'} onClick={ e => setSubreddit(e.target.value)}>Random</button>\r\n        </div>\r\n        <input type='text' className='input' value={subreddit} onChange={ e => setSubreddit(e.target.value)}/>\r\n        <div className='articles'>\r\n          {\r\n            (articles != null) ? articles.map((article, index) => <Article key={index} article={article.data} />) : ''\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}